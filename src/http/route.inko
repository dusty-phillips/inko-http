import std::string::(ToString, StringBuffer)
import std::fmt::(Format, Formatter)
import http::http_request
import http::app_request::(AppRequest)
import http::http_response


# A RouteMatcher converts a http_request into an AppRequest if
# and only if the route is deemed to match the request.
trait pub RouteMatcher {
  fn pub match(request: ref http_request::HttpRequest) -> Option[AppRequest]
}


# Simple static matching if the method and path are exactly what was
# provided.
class pub FixedRoute {
  let @method: http_request::Method
  let @path: http_request::Path

  fn pub static new(method: http_request::Method, path: String) -> FixedRoute {
    FixedRoute {
      @method = method
      @path = http_request::Path.new(path)
    }
  }

  # Create a route matcher for a GET request to a specific path.
  fn pub static get(path: String) -> FixedRoute {
    FixedRoute.new(http_request::Method.Get, path)
  }
  #
  # Create a route matcher for a POST request to a specific path.
  fn pub static post(path: String) -> FixedRoute {
    FixedRoute.new(http_request::Method.Post, path)
  }
}
impl RouteMatcher for FixedRoute {
  fn pub match(request: ref http_request::HttpRequest) -> Option[AppRequest] {
    if (request.method != @method) {
      return Option.None
    }
    if (request.path != @path) {
      return Option.None
    }
    return Option.Some(AppRequest.new(request.clone))
  }
}

# Enum for a part of a path in the ParamRoute matcher.
class enum ParamPathPart {
  # A fixed path part that does not vary
  case Fixed(String)
  # A variable path part with an identified name.
  # Identified in the path template by `{}`
  case Param(String)
}

impl Format for ParamPathPart {
  fn pub fmt (formatter: mut Formatter) {
     match self {
       case Fixed(path) -> formatter.write(path)
       case Param(name) -> {
         formatter.write('{')
         formatter.write(name)
         formatter.write('}')
       }
     }
  }
}

# Split a template path at `/` and extract the parts that are
# template paths vs fixed paths.
fn parse_path_parts(path_template: String) -> Array[ParamPathPart] {
  let path_parts = []
  let iter = path_template.split('/')

  iter.each fn (part) {
    if part.starts_with?('{') and part.ends_with?('}') {
      path_parts.push(ParamPathPart.Param(part.slice_bytes(1, part.size - 2)))
    } else {
      path_parts.push(ParamPathPart.Fixed(part))
    }
  }
  path_parts
}

# A RouteMatcher that can contain variable path parts.
#
# For example GET /people/{person_id}/
class pub ParamRoute {
  let @method: http_request::Method
  let @template_path_parts: Array[ParamPathPart]

  # Construct a new ParamRoute with a template string and
  # method. The template string should be of the form `/fixed/{param}/fixed/...`
  fn pub static new(method: http_request::Method, path_template: String) -> ParamRoute {
    let path_parts = parse_path_parts(path_template)
    ParamRoute {
      @method = method
      @template_path_parts = path_parts
    }
  }

  # Construct a GET request to a templated path.
  fn pub static get(path_template: String) -> ParamRoute {
    ParamRoute.new(http_request::Method.Get, path_template)
  }
}

impl RouteMatcher for ParamRoute {
  # Determine if the given request matches the method and template
  # path defined in this route. If so, return an AppRequest containing
  # the path parameters.
  fn pub match(request: ref http_request::HttpRequest) -> Option[AppRequest] {
    if (request.method != @method) {
      return Option.None
    }

    let parts_iter = request.path.path.split('/').zip(@template_path_parts.iter)
    let app_request = AppRequest.new(request.clone)

    let mut count = 0
    loop {
      let next_match = parts_iter.next
      match next_match {
        case None -> break
        case Some((provided, Fixed(part))) if provided != part -> return Option.None
        case Some((provided, Fixed(part))) -> nil
        case Some((provided, Param(name))) -> app_request.add_param(name, provided)
      }
      count += 1
    }

    if count != @template_path_parts.length {
      return Option.None
    }

    Option.Some(app_request)
  }
}
