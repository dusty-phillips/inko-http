import std.fmt.(Format, Formatter)
import std.clone.(Clone)
import std.hash.(Hash, Hasher)
import std.cmp.(Equal)
import http.uni.(Uni)

# Represents the various parts of an HTTP Path.
#
# TODO: This needs to parse the path, extract fragments, etc.
class pub Path {
  let pub @path: String

  fn pub static new(path: String) -> Path {
    Path {@path = path}
  }
}

impl Uni[Path] for Path {
    fn pub clone_to_uni() -> uni Path {
        recover Path {
          @path = recover @path.clone
        }
    }

    fn pub move into_referrable -> Path {
        self
    }
}


impl Equal[Path] for Path {
  fn pub ==(other: ref Path) -> Bool {
    other.path == @path
  }
}

impl Clone[Path] for Path {
  fn pub clone -> Path {
    Path {
      @path = @path.clone
    }
  }
}

impl Hash for Path {
  fn pub hash[H: mut + Hasher](hasher: mut H) {
    @path.hash(hasher)
  }
}

impl Format for Path {
    fn pub fmt(formatter: mut Formatter) {
      formatter.write(@path)
    }
}

