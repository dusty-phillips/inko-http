import std::fmt::(Format, Formatter)
import std::stdio::(STDOUT)
import std::net::socket
import std::net::ip
import std::io
import std::iter::(Iter)
import std::string::(StringBuffer, ToString)
import http::option_ext
import http::uni::(Uni)
import http::line_reader::(LineReader)
import http::route::(RouteMatcher)
import http::http_request::(Method, HttpRequest)
import http::app_request::(AppRequest)
import http::http_response::(HttpStatus, HttpResponse)
import http::handler::(Handler)
import http::debug_ext::(debug)


# An implementation of handler for the general 404 case.
class NotFoundHandler {}

impl Uni[Handler] for NotFoundHandler {
  fn pub clone_to_uni -> uni NotFoundHandler {
    recover NotFoundHandler {}
  }

  fn pub move into_referrable -> NotFoundHandler {
      self
  }
}

impl Handler for NotFoundHandler {
  fn pub handle(request: ref AppRequest) -> HttpResponse {
    let response = HttpResponse.new(HttpStatus.NOT_FOUND)
    response.body = "Not found"
    response
  }
}

# Collection of routes that the developer has defined, and their associated
# handlers.
class async RouteMapper {
  let @routes: Array[(RouteMatcher, Handler)]

  fn static new -> RouteMapper {
    RouteMapper {
      @routes = recover []
    }
  }

  # Add a route and handler for that route to the list of routes.
  fn pub async mut add_route(route: uni RouteMatcher, handler: uni Handler) {
    @routes.push((route, handler))
  }

  # Loop over all defined routes (in order) and find the first one that
  # is considered to match the given request.
  #
  # If a match is found, send it back over the provided channel.
  # Otherwise, send `Option.None`.
  fn pub async mut match(request: uni HttpRequest, channel: Channel[uni Option[(AppRequest, Handler)]]) {
    let iter = @routes.iter
    let request = request.into_referrable
    let mut result = recover Option.None
    loop {
      match iter.next {
        case None -> break
        case Some((route, handler)) -> {
          match route.match(request) {
            case None -> nil
            case Some(app_request) -> {
              result = recover Option.Some((app_request.clone_to_uni, handler.clone_to_uni))
              break
            }
          }
        }
      }
    }
    channel.send(result)
  }
}

# Handler for a single TCP connection that we have accepted an incoming request
# from.
class async SocketHandler {
  let @connection: socket::TcpClient
  let @routes: RouteMapper

  # Construct a new SocketHandler around the provided connection and routes.
  fn static new(connection: uni socket::TcpClient, routes: RouteMapper) -> SocketHandler {
    SocketHandler {
      @connection = connection
      @routes = routes
    }
  }

  # Parse incoming bytes on the provided connection and attempt to convert them to an HTTP Request.
  # Respond with a valid HTTP Response. The response may be a built-in response such as Not Found
  # or Bad Request, or it will be the result of passing the request into a matching registered handler.
  fn async mut handle {
    let http_request = match HttpRequest.parse(@connection) {
      case Ok(val) -> val
      case Error(error) -> {
        debug(error)
        match error.to_response.write(@connection) {
          case Ok(_) -> nil
          case Error(error) -> debug(error)
        }
        return
      }
    }

    let channel = Channel.new(size: 1)
    @routes.match(http_request.clone_to_uni, channel)
    let request_with_handler = channel.receive.unwrap_or((AppRequest.new(http_request), NotFoundHandler {} ))
    let app_request = request_with_handler.0
    let handler = request_with_handler.1

    let response: HttpResponse = handler.handle(app_request)
    debug(response)
    match response.write(@connection) {
      case Ok(_) -> nil
      case Error(error) -> debug(error)
    }
  }
}


# Main entry point to the inko http framework.
class pub WebApp {
  let @listener: uni socket::TcpServer
  let @port: Int
  let @routes: RouteMapper

  # Create a  new WebApp that will connect to the given
  # address and port when `listen()` is called
  fn pub static new(address: String, port: uni Int) -> Result[WebApp,  io::Error] {

    let ip = recover ip::IpAddress.parse(address).unwrap
    let listener =  recover try socket::TcpServer.new(recover ip, port)

    Result.Ok(
      WebApp {
        @port = port
        @listener = listener
        @routes = RouteMapper.new
      }
    )
  }

  # Register a handler to handle a specific route.
  fn pub mut add_route(route: uni RouteMatcher, handler: uni Handler) {
    @routes.add_route(route, handler)
  }

  # Start listening for incoming connections.
  fn pub move listen() {
    STDOUT.new.print("Listening on port {@port.to_string}")
    loop {
      let connection = recover @listener.accept.unwrap
      SocketHandler.new(connection, @routes).handle
    }
  }
}



