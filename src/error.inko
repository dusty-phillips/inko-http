import std::fmt::(Format, Formatter)
import http_response::(HttpStatus, HttpResponse)
import std::io

class pub enum ParseError {
  case IOError(io::Error)
  case UnexpectedEOF
  case MalformedRequestLine
  case VersionUnavailable
  case InvalidMethod
  case InvalidContentLength
  case ContentLengthMismatch
  case BadRequest

  fn pub to_response() -> HttpResponse {
    # TODO: This should return custom error codes depending what type it is
    HttpResponse.new(HttpStatus.BAD_REQUEST)
  }
}

impl Format for ParseError {
  fn pub fmt(formatter: mut Formatter) {
    let string = match self {
      case IOError(_) -> "IOError"
      case UnexpectedEOF -> "UnexpectedEOF"
      case MalformedRequestLine -> "MalformedRequestLine"
      case VersionUnavailable -> "VersionUnavailable"
      case InvalidMethod -> "InvalidMethod"
      case InvalidContentLength -> "InvalidContentLength"
      case ContentLengthMismatch -> "ContentLengthMismatch"
      case BadRequest -> "BadRequest"
    }
    string.fmt(formatter)
  }
}

