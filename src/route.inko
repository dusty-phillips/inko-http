import debug_ext::(debug)
import request
import response
import std::clone::(Clone)
import std::hash::(Hash, Hasher)
import std::cmp::(Equal)


trait pub RouteMatcher: Hash + Equal {
  fn pub match(request: ref request::HttpRequest) -> Bool
}


class pub FixedRoute {
  let @method: request::Method 
  let @path: request::Path

  fn pub static get(path: String) -> Self {
    FixedRoute {
      @method = request::Method.Get
      @path = request::Path.new(path)
    }
  }
}

impl Clone for FixedRoute {
  fn pub clone -> Self {
    FixedRoute {
      @path = @path.clone   
      @method = @method.clone
    }
  }
}

impl Hash for FixedRoute {
  fn pub hash(hasher: mut Hasher) {
    @method.hash(hasher)
    @path.hash(hasher)
  }
}

impl Equal for FixedRoute {
  fn pub ==(other: ref Self) -> Bool {
    @method == other.method and @path == other.path
  }
}

impl RouteMatcher for FixedRoute {
  fn pub match(request: ref request::HttpRequest) -> Bool {
    debug(request.method)
    debug(@method)
    debug(request.path)
    debug(@path)
    if (request.method != @method) {
      return false
    }
    if (request.path != @path) {
      return false
    }
    return true
  }
}

